#!/bin/bash

#Clean previous namespaces
ip netns delete container_1
ip netns delete container_2

#Add a namespace for each container
ip netns add container_1
ip netns add container_2

#Output changes
echo -e "\e[30;48;5;87m \e[1m "Created network namespaces for each container"\x1b[K\e[0m"
ip netns list

#Clean host interfaces
ip link del veth1
ip link del veth2

#Add a veth link between the container namespaces
ip link add veth1 netns container_1 type veth peer name veth1 netns container_2
#Add veth links between each container and the host
ip link add veth0 netns container_1 type veth peer name veth1
ip link add veth0 netns container_2 type veth peer name veth2

#Output changes
echo -e "\e[30;48;5;87m \e[1m "Created veth links between containers and with the host"\x1b[K\e[0m"
echo -e "\e[30;48;5;209m \e[1m "Host:"\x1b[K\e[0m"
ip addr show dev veth1
ip addr show dev veth2
echo -e "\e[30;48;5;209m \e[1m "Container 1:"\x1b[K\e[0m"
ip netns exec container_1 ip addr show dev veth0
ip netns exec container_1 ip addr show dev veth1
echo -e "\e[30;48;5;209m \e[1m "Container 2:"\x1b[K\e[0m"
ip netns exec container_2 ip addr show dev veth0
ip netns exec container_2 ip addr show dev veth1

#Assign an IP address to each interface
#Between containers
ip netns exec container_1 ip address add 192.168.1.0/24 dev veth1 
ip netns exec container_2 ip address add 192.168.1.1/24 dev veth1
#With the host
ip netns exec container_1 ip address add 192.168.2.0/24 dev veth0 
ip netns exec container_2 ip address add 192.168.3.0/24 dev veth0 
#In the host
ip address add 192.168.2.1/24 dev veth1
ip address add 192.168.3.1/24 dev veth2

#Activate the interfaces
ip netns exec container_1 ip link set dev veth0 up
ip netns exec container_1 ip link set dev veth1 up
ip netns exec container_2 ip link set dev veth0 up
ip netns exec container_2 ip link set dev veth1 up
ip link set dev veth1 up
ip link set dev veth2 up

#Output changes
echo -e "\e[30;48;5;87m \e[1m "Activated the interfaces and assigned addresses"\x1b[K\e[0m"
echo -e "\e[30;48;5;209m \e[1m "Host:"\x1b[K\e[0m"
ip addr show dev veth1
ip addr show dev veth2
echo -e "\e[30;48;5;209m \e[1m "Container 1:"\x1b[K\e[0m"
ip netns exec container_1 ip addr show dev veth0
ip netns exec container_1 ip addr show dev veth1
echo -e "\e[30;48;5;209m \e[1m "Container 2:"\x1b[K\e[0m"
ip netns exec container_2 ip addr show dev veth0
ip netns exec container_2 ip addr show dev veth1

#Show routing tables
echo -e "\e[30;48;5;87m \e[1m "Routing tables"\x1b[K\e[0m"
echo -e "\e[30;48;5;209m \e[1m "Host:"\x1b[K\e[0m"
ip route
echo -e "\e[30;48;5;209m \e[1m "Container 1:"\x1b[K\e[0m"
ip netns exec container_1 ip route
echo -e "\e[30;48;5;209m \e[1m "Container 2:"\x1b[K\e[0m"
ip netns exec container_2 ip route

#Clean previous containers
docker container stop ubuntu_1
docker container rm ubuntu_1
docker container stop ubuntu_2
docker container rm ubuntu_2

#Create containers (ubuntu_practica is a normal ubuntu image plus iproute2 and ping)
docker run --name ubuntu_1 -d -it --network none ubuntu_practica
docker run --name ubuntu_2 -d -it --network none ubuntu_practica

#Output changes
echo -e "\e[30;48;5;87m \e[1m "Created containers"\x1b[K\e[0m"
docker container ls

#Get PID of the main process of each container, and add it to it's corresponding 
#iproute netns
container_pid="$(docker inspect ubuntu_1 -f '{{.State.Pid}}')"
ln -sf /var/run/netns/container_1 /proc/$container_pid/ns/net
container_pid="$(docker inspect ubuntu_2 -f '{{.State.Pid}}')"
ln -sf /var/run/netns/container_2 /proc/$container_pid/ns/net 















#Colors: https://misc.flogisoft.com/bash/tip_colors_and_formatting
#Whole line: https://unix.stackexchange.com/questions/291852/how-to-\
#change-the-background-color-for-exactly-one-line (2nd answer)
#echo -e "\e[30;48;5;87m \e[1m     "$size" "$pyramid" "$iter" "$iters_per_copy"\x1b[K\e[0m"

